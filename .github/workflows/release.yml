
# This Workflow performs a full release of Che Code
name: Release Che Code
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'The version that is going to be released. Should be in format 7.y.z'
        required: true
        default: '7.y.z'
      forceRecreateTags:
        description: If true, tags will be recreated. Use with caution
        required: false
        default: 'false'

jobs:
  build:
    name: build
    strategy:
      fail-fast: false
      matrix:
        dist: [ 'musl', 'libc' ]
        arch: ['amd64']
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Docker Build
        run: |
          docker buildx build --memory-swap -1 --memory 10g --platform linux/${{matrix.arch}} -f build/dockerfiles/linux-${{matrix.dist}}.Dockerfile --load -t linux-${{matrix.dist}}-${{matrix.arch}} .
      - name: Upload image
        uses: ishworkh/docker-image-artifact-upload@v1
        with:
          image: "linux-${{matrix.dist}}-${{matrix.arch}}"
  assemble:
    name: assemble
    needs: build
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download linux-libc-amd64 image
        uses: ishworkh/docker-image-artifact-download@v1
        with:
          image: "linux-libc-amd64"
      - name: Download linux-musl image
        uses: ishworkh/docker-image-artifact-download@v1
        with:
          image: "linux-musl-amd64"
      - name: Display docker images
        run: |
          docker images
      - name: Login to Quay.io
        uses: docker/login-action@v1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}        
      - name: Docker Build and Push
        run: |
          SHORT_SHA1=$(git rev-parse --short=7 HEAD)
          docker buildx build --platform linux/amd64 -f build/dockerfiles/assembly.Dockerfile --push -t quay.io/che-incubator/che-code:${{ github.event.inputs.version }}.
  tag-release:
    needs: assemble
    runs-on: ubuntu-20.04
    steps:
      -
        name: "Checkout Che Code source code"
        uses: actions/checkout@v2
      -
        name: "Setup Node"
        uses: actions/setup-node@v2
        with:
          node-version: "14"
      -
        name: Check existing tags
        run: |
          set +e
          RECREATE_TAGS=${{ github.event.inputs.forceRecreateTags }}
          VERSION=${{ github.event.inputs.version }}
          EXISTING_TAG=$(git ls-remote --exit-code origin refs/tags/${VERSION})
          if [[ -n ${EXISTING_TAG} ]]; then
            if [[ ${RECREATE_TAGS} == "true" ]]; then
              echo "[INFO] Removing tag for ${VERSION} version. New tag will be recreated during release."
              git push origin :$VERSION
            else
              echo "[ERROR] Cannot proceed with release - tag ${EXISTING_TAG} already exists."
              exit 1
            fi
          else
            echo "[INFO] No existing tags detected for $VERSION"
          fi
      -
        name: "Tag release"
        run: |
          git config --global user.name "Mykhailo Kuznietsov"
          git config --global user.email "mkuznets@redhat.com"
          git config --global pull.rebase true
          export GITHUB_TOKEN=${{ secrets.CHE_BOT_GITHUB_TOKEN }}
          /bin/bash make-release.sh --version ${{ github.event.inputs.version }} --tag-release
      - name: Create failure MM message
        if: ${{ failure() }}
        run: |
          echo "{\"text\":\":no_entry_sign: Che Code ${{ github.event.inputs.version }} release has failed: https://github.com/che-incubator/che-code/actions/workflows/release.yml\"}" > mattermost.json
      - name: Create success MM message
        run: |
          echo "{\"text\":\":white_check_mark: Che Code ${{ github.event.inputs.version }} has been released: https://quay.io/che-incubator/che-code:${{ github.event.inputs.version }}\"}" > mattermost.json
      - name: Send MM message
        if: ${{ success() }} || ${{ failure() }}
        uses: mattermost/action-mattermost-notify@1.1.0
        env:
          MATTERMOST_WEBHOOK_URL: ${{ secrets.MATTERMOST_WEBHOOK_URL }}
          MATTERMOST_CHANNEL: eclipse-che-releases
          MATTERMOST_USERNAME: che-bot
