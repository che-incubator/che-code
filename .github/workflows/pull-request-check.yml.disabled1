#
# Copyright (c) 2021 Red Hat, Inc.
# This program and the accompanying materials are made
# available under the terms of the Eclipse Public License 2.0
# which is available at https://www.eclipse.org/legal/epl-2.0/
#
# SPDX-License-Identifier: EPL-2.0
#

name: Pull Request Check

# Trigger the workflow on pull request
on: [pull_request]

jobs:

  build:
    name: build
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        dist: ['libc-ubi8', 'libc-ubi9', 'musl']
        arch: ['amd64']
    steps:

      - name: Checkout che-code source code
        uses: actions/checkout@v4

      - name: Cleanup docker images
        run: |
          docker system prune -af

      - name: Compile che-code FAKE
        run: |
          docker pull httpd
          docker tag httpd linux-${{matrix.dist}}-${{matrix.arch}}

      # - name: Compile che-code
      #   run: |
      #     docker buildx build \
      #       --platform linux/${{matrix.arch}} \
      #       --progress=plain \
      #       -f build/dockerfiles/linux-${{matrix.dist}}.Dockerfile \
      #       -t linux-${{matrix.dist}}-${{matrix.arch}} .
      
      - name: Compress image to a file
        run: |
          docker save linux-${{matrix.dist}}-${{matrix.arch}} | gzip > linux-${{matrix.dist}}-${{matrix.arch}}.tgz

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{matrix.dist}}-${{matrix.arch}}
          path: linux-${{matrix.dist}}-${{matrix.arch}}.tgz

  assemble:
    name: assemble
    runs-on: ubuntu-22.04
    needs: build
    steps:

      - name: Checkout che-code source code
        uses: actions/checkout@v4

      - name: Cleanup docker images
        run: |
          docker system prune -af

      # - name: Download linux-libc-ubi8-amd64 image artifact
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: linux-libc-ubi8-amd64
      #     path: .

      # - name: Download linux-libc-ubi9-amd64 image artifact
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: linux-libc-ubi9-amd64
      #     path: .

      # - name: Download linux-musl-amd64 image artifact
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: linux-musl-amd64
      #     path: .

      - name: Download editor artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: linux-*
          merge-multiple: true
          path: .

      - name: Load docker images
        run: |
          docker load -i linux-libc-ubi8-amd64.tgz
          docker load -i linux-libc-ubi9-amd64.tgz
          docker load -i linux-musl-amd64.tgz

      - name: Display docker images
        run: |
          docker images

      - name: Assemble che-code FAKE
        run: |
          docker pull httpd
          docker tag httpd che-code

      # - name: Assemble che-code
      #   run: |
      #     docker buildx build \
      #       --platform linux/amd64 \
      #       --progress=plain \
      #       -f build/dockerfiles/assembly.Dockerfile \
      #       -t che-code .

      - name: Display docker images (final)
        run: |
          docker images

      - name: Compress image to a file
        run: |
          docker save che-code | gzip > che-code.tgz

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: che-code
          path: che-code.tgz

      - name: Store PR info
        run: |
          echo "${{ github.event.number }}" > PR_NUMBER
          echo "${{ github.event.pull_request.head.sha }}" > PR_SHA

      - name: Upload PR Number artifact
        uses: actions/upload-artifact@v4
        with:
          name: pull-request-number
          path: PR_NUMBER

      # - name: Upload PR SHA artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: pull-request-sha
      #     path: PR_SHA

  dev:
    name: build-che-dev-image
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout che-code source code
        uses: actions/checkout@v4

      - name: Cleanup docker images
        run: |
          docker system prune -af

      - name: Build Che-Code Docker image FAKE
        run: |
          docker pull httpd
          docker tag httpd che-dev

      # - name: Build Che-Code Docker image
      #   run: |
      #     docker buildx build \
      #       --platform linux/amd64 \
      #       --progress=plain \
      #       -f build/dockerfiles/dev.Dockerfile \
      #       -t che-dev .

      - name: Display docker images
        run: |
          echo "================================================================="
          docker images
          echo "================================================================="

      - name: Compress che-dev image to a file
        run: |
          docker save che-dev | gzip > che-dev.tgz

      - name: Upload che-dev docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: che-dev
          path: che-dev.tgz


















  # dev2:
  #   name: dev2
  #   runs-on: ubuntu-22.04
  #   needs: dev1
  #   steps:

  #     - name: Cleanup docker images
  #       run: |
  #         docker system prune -af

  #     - name: Download che-dev docker image artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: che-dev-image
  #         path: .

  #     - name: Load dev Docker image
  #       run: |
  #         docker load -i che-dev-am64.tgz

  #     - name: Display docker images
  #       run: |
  #         echo "================================================================="
  #         docker images
  #         echo "================================================================="

  #     - name: Login to Quay.io
  #       uses: docker/login-action@v2
  #       with:
  #         registry: quay.io
  #         username: ${{ secrets.QUAY_PULL_REQUESTS_USERNAME }}
  #         password: ${{ secrets.QUAY_PULL_REQUESTS_PASSWORD }}

  #     - name: Publish che-dev image
  #       run: |
  #         PR_NUMBER="${{ github.event.number }}"
  #         echo "Pull request ${PR_NUMBER}"

  #         DEV_IMAGE_NAME="quay.io/vgulyy/che-code-dev:pr-${PR_NUMBER}-dev-amd64"
  #         # DEV_IMAGE_NAME="quay.io/che-incubator-pull-requests/che-code-dev:pr-${PR_NUMBER}-dev-amd64"
  #         echo "Dev image ${DEV_IMAGE_NAME}"
  #         echo "_DEV_IMAGE_NAME=${DEV_IMAGE_NAME}" >> $GITHUB_ENV

  #         docker tag che-dev-am64 ${DEV_IMAGE_NAME}
  #         docker push ${DEV_IMAGE_NAME}

  #     - name: 'Comment PR'
  #       uses: actions/github-script@v6
  #       with:
  #        script: |
  #          const { repo: { owner, repo } } = context;
  #          await github.rest.issues.createComment({
  #             issue_number: context.issue.number,
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             body: `Pull Request Dev image published:\nðŸ‘‰ [${process.env._DEV_IMAGE_NAME}](https://${process.env._DEV_IMAGE_NAME})`
  #           })
